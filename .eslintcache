[{"/home/dna-developer/dna/demo/finalregister/src/index.js":"1","/home/dna-developer/dna/demo/finalregister/src/reportWebVitals.js":"2","/home/dna-developer/dna/demo/finalregister/src/App.js":"3","/home/dna-developer/dna/demo/finalregister/src/component/todo/index.js":"4","/home/dna-developer/dna/demo/finalregister/src/component/form/login/index.js":"5","/home/dna-developer/dna/demo/finalregister/src/component/form/register/index.js":"6"},{"size":288,"mtime":1614030187774,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1614008838932,"results":"9","hashOfConfig":"8"},{"size":2615,"mtime":1614031492681,"results":"10","hashOfConfig":"8"},{"size":6500,"mtime":1614122732464,"results":"11","hashOfConfig":"8"},{"size":2411,"mtime":1614030390180,"results":"12","hashOfConfig":"8"},{"size":3285,"mtime":1614034886831,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1c6uj8r",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/home/dna-developer/dna/demo/finalregister/src/index.js",[],["30","31"],"/home/dna-developer/dna/demo/finalregister/src/reportWebVitals.js",[],"/home/dna-developer/dna/demo/finalregister/src/App.js",["32"],"import './App.css';\nimport Login from './component/form/login'\nimport Register from './component/form/register'\nimport { useState } from 'react'\nimport Todo from './component/todo'\n\nfunction App() {\n\n  const [user, setUser] = useState(null)\n  const [userId, setUserId] = useState(localStorage.getItem(\"userId\") ? localStorage.getItem(\"userId\") : null)\n  const [prismClass, setprismClass] = useState(localStorage.getItem(\"component\") ? localStorage.getItem(\"component\") : \"showLogin\")\n\n\n  function showSignup() {\n    localStorage.setItem(\"component\", \"showSignup\")\n    setprismClass(\"showSignup\")\n  }\n\n  function showLogin() {\n    localStorage.setItem(\"component\", \"showLogin\")\n    setprismClass(\"showLogin\")\n  }\n\n  function showTodo() {\n    localStorage.setItem(\"component\", \"todo\")\n    setprismClass(\"todo\")\n  }\n\n  const handleLogoutButton = () => {\n    localStorage.setItem(\"component\", \"showLogin\")\n    localStorage.setItem(\"userId\", \"\")\n    localStorage.setItem(\"username\", \"\")\n\n    setprismClass(\"showLogin\")\n  }\n\n\n  return (\n    <div className=\"App\">\n      {prismClass === 'todo' ? <Todo userId={userId} handleLogoutButton={handleLogoutButton}></Todo> :\n        <>\n          <ul className=\"nav\">\n          </ul>\n          <div className=\"wrapper\">\n            <div className={`rec-prism ${prismClass}`}>\n              <div className=\"face face-top\">\n                <div className=\"content\">\n                  <div className=\"field-wrapper\">\n                    <input type=\"text\" name=\"email\" placeholder=\"email\" />\n                    <label>e-mail</label>\n                  </div>\n                  <div className=\"field-wrapper\">\n                    <input onClick={showTodo} />\n                  </div>\n                </div>\n              </div>\n              <div className=\"face face-front\">\n                <Login\n                  showTodo={showTodo}\n                  showSignup={showSignup}\n                  setUser={setUser}\n                  setUserId={setUserId}\n                ></Login>\n              </div>\n              <div className=\"face face-right\">\n                <Register\n                  showTodo={showTodo}\n                  showLogin={showLogin}\n                  setUser={setUser}\n                  setUserId={setUserId}\n                ></Register>\n              </div>\n              <div className=\"face face-bottom\">\n                <div className=\"content\">\n                  <div className=\"thank-you-msg\">\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","/home/dna-developer/dna/demo/finalregister/src/component/todo/index.js",["33","34","35"],"import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport './todo.css'\n\n\nfunction Todo(props) {\n\n    const [todoname, setTodoname] = useState(\"\")\n    const [data, setData] = useState([]);\n    const [todonameEdit, setTodonameEdit] = useState(\"\")\n    const [selectedTodoId, setSelectedTodoId] = useState(\" \");\n\n\n    const todonameInputChange = (e) => {\n        setTodoname(e.target.value);\n    }\n\n    const todonameEditInputChange = (e) => {\n        setTodonameEdit(e.target.value);\n    }\n\n    const handleDeleteButton = (e) => {\n        console.log(e.target.id);\n        try {\n            const response = axios.delete(`/tasks/${e.target.id}`)\n            getUser();\n        }\n        catch (error) {\n            console.log(error)\n        }\n    }\n\n\n    const handlerSelectedTodo = (e) => {\n        setTodonameEdit(e.todoname)\n        setSelectedTodoId(e.id)\n\n    }\n\n    const handleCancelButton = (e) => {\n        setSelectedTodoId(\" \")\n    }\n\n    const handleSaveButton = (e) => {\n        setTodoname(\" \");\n        const { id, name } = e.target\n        axios.post('/TodoUpdate', { id: id, todoname: name })\n            .then(function (response) {\n                getUser()\n                setSelectedTodoId(\" \")\n            })\n            .catch(function (error) {\n                alert(error)\n            })\n    }\n\n    const handleAddButton = async () => {\n        try {\n            const detail = {\n                todoname: todoname,\n                userId: props.userId\n            }\n            if (todoname !== \"\") {\n                const event = await axios.post('/tasks', detail)\n                if (event.data.Type === \"Success\") {\n                    setTodoname(\"\");\n                    localStorage.setItem(\"todo\", Todo)\n                }\n                else {\n                    alert(\"pop\")\n                }\n            }\n            getUser()\n        }\n        catch (error) {\n            alert(error)\n        }\n\n    }\n\n    function getUser() {\n        axios.get(`/users/${props.userId}/todos`)\n            .then(function (response) {\n                setData(response.data);\n            })\n            .catch(function (error) { return error })\n    }\n\n\n    useEffect(() => {\n        getUser();\n    }, []);\n\n    return (\n        <div className=\"content\">\n            <div className=\"todowrapper\">\n                <body id=\"container\">\n                    <div>\n                        <div className=\"card\" >\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">{localStorage.getItem(\"username\")}'s</h5>\n                                <p className=\"card-text\">TODO LIST</p>\n                                <a href=\"#\" onClick={props.handleLogoutButton} className=\"btn btn-danger\">LOGOUT</a>\n                            </div>\n                        </div>\n                        <br />\n\n                        <div className=\"input-group mb-3\">\n                            <input onChange={todonameInputChange} value={todoname} type=\"text\" className=\"form-control\" />\n                            <button onClick={handleAddButton} type=\"button\" className=\"btn btn-success\"><i className=\"fas fa-plus\"></i></button>\n\n                        </div>\n                        <div className=\"container\">\n                            <div className=\"row\">\n                                <div className=\"col-12\">\n                                    <table className=\"table table-bordered\">\n                                        <thead>\n                                            <tr>\n                                                <th scope=\"col\">Todo List</th>\n                                                <th scope=\"col\">Actions</th>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            {\n                                                data.length\n                                                    ?\n                                                    data.map((items) => {\n                                                        return (\n                                                            <tr>\n                                                                <td id={items.id} onClick={() => handlerSelectedTodo(items)}> {selectedTodoId === items.id ?\n                                                                    <input className=\"form-control\" type=\"text\" id={items.id} value={todonameEdit} onChange={todonameEditInputChange}></input>\n                                                                    : items.todoname}\n                                                                </td>\n                                                                <td>\n                                                                    {selectedTodoId === items.id ?\n                                                                        <div>\n                                                                            <button className=\"btn btn-outline-success\" id={selectedTodoId} name={todonameEdit} onClick={handleSaveButton}>SAVE</button>\n                                                                            <button className=\"btn btn-outline-warning\" onClick={handleCancelButton}>CANCEL</button>\n                                                                        </div>\n                                                                        : <button type=\"button\" id={items.id} onClick={handleDeleteButton} className=\"btn btn-outline-danger\">DELETE</button>}\n                                                                </td>\n                                                            </tr>\n                                                        )\n                                                    })\n                                                    :\n                                                    <tr>\n                                                        <td>No available todo</td>\n\n                                                    </tr>\n                                            }\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </body>\n            </div>\n        </div>\n    )\n}\n\nexport default Todo","/home/dna-developer/dna/demo/finalregister/src/component/form/login/index.js",[],["36","37"],"/home/dna-developer/dna/demo/finalregister/src/component/form/register/index.js",[],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":9,"column":10,"nodeType":"44","messageId":"45","endLine":9,"endColumn":14},{"ruleId":"42","severity":1,"message":"46","line":25,"column":19,"nodeType":"44","messageId":"45","endLine":25,"endColumn":27},{"ruleId":"47","severity":1,"message":"48","line":92,"column":8,"nodeType":"49","endLine":92,"endColumn":10,"suggestions":"50"},{"ruleId":"51","severity":1,"message":"52","line":103,"column":33,"nodeType":"53","endLine":103,"endColumn":107},{"ruleId":"38","replacedBy":"54"},{"ruleId":"40","replacedBy":"55"},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","'response' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getUser'. Either include it or remove the dependency array.","ArrayExpression",["58"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["56"],["57"],"no-global-assign","no-unsafe-negation",{"desc":"59","fix":"60"},"Update the dependencies array to be: [getUser]",{"range":"61","text":"62"},[2245,2247],"[getUser]"]